# .github/workflows/main.yml
name: Userservice_CD

# 1. 워크플로우 실행 트리거: main 브랜치에 코드가 푸시될 때 자동 실행
on:
  push:
    branches:
      - main

# 2. 워크플로우 전체에서 사용할 환경 변수
env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/user-service
  K8S_DEPLOYMENT: user-service
  K8S_NAMESPACE: default

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      # 1) 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3
        
      # ------------------------------------------------
      # 3) JDK 17 설치 (Spring Boot 빌드를 위해 필요)
      # ------------------------------------------------
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # ------------------------------------------------
      # 4) Maven 의존성 캐시 (빌드 속도 최적화)
      # ------------------------------------------------
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # ------------------------------------------------
      # 5) Maven으로 Spring Boot 패키징 (Jar 생성)
      # ------------------------------------------------
      - name: Build with Maven
        run: mvn clean compile package -DskipTests

      # ------------------------------------------------
      # 6) Docker Hub 로그인
      # ------------------------------------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # GitHub Secrets에 등록한 DOCKERHUB_USERNAME, DOCKERHUB_TOKEN 을 이용해
        # Docker Hub에 로그인합니다.

      # ------------------------------------------------
      # 7) Docker Buildx 설치 (멀티 아키텍처 빌드 지원)
      # ------------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # docker buildx를 활성화하여 linux/amd64, linux/arm64 등 멀티 아키텍처 이미지 빌드가 가능하게 합니다.

      # ------------------------------------------------
      # 8) Docker 이미지 빌드 및 푸시
      # ------------------------------------------------
      - name: Build and Push Docker image
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)

          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t $IMAGE_NAME:$COMMIT_HASH \
            -t $IMAGE_NAME:latest \
            --push \
            .

      # ------------------------------------------------
      # 9) kubectl 설치 (Kubernetes 명령어 사용 준비)
      # ------------------------------------------------
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      # 10) OCI CLI 설치
      - name: Install OCI CLI
        run: |
          python3 -m pip install --upgrade pip
          pip3 install oci-cli --upgrade
          echo "PATH=$HOME/.local/bin:\$PATH" >> $GITHUB_ENV

      # ------------------------------------------------
      # 11) Kubeconfig 복원 (GitHub Secrets → ~/.kube/config)
      # ------------------------------------------------
      - name: Restore Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config
          chmod 600 ~/.kube/config

          kubectl config view
          kubectl get nodes --no-headers

      # 12) Kubernetes 매니페스트 적용(apply)
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/
